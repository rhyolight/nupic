#!/usr/bin/env python
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2013, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
"""
This is the command-line interface for the Hot Gym Tutorial.
"""
import os

import sys
import optparse

import swarm_helper
import generate_data
import nupic_runner
import cleaner


def runHotGym(args):
  helpString = (
      "\n\n%prog <command> [options]\n\n"

      "Current commands are:\n"

      "\n\tgenerate_data [--input=<path>]\n"
      "\t\tWhere the input path points to a file of raw gym data. Default\n"
      "\t\tvalue is "
      "$NUPIC/examples/prediction/data/extra/hotgym/raw/gym_input.csv.\n"

      "\n\tswarm --input=<path>\n"
      "\t\tWhere the input path points to a CSV file of input or a directory\n"
      "\t\tof input files.\n"

      "\n\trun [--name=<gym name>] [--all] [--plot]\n"
      "\t\tWhere the gym name corresponds to model parameters that have \n"
      "\t\talready generated by the 'swarm' command in the model_params\n"
      "\t\tdirectory. If 'all' is given, all model params found will run.\n"
      "\t\tEither --name or --all must be given.\n"

      "\n\tkitchen_sink [--plot]\n"
      "\t\tGenerates data from default raw input file, swarms over all \n"
      "\t\tinput files created, and runs them all through NuPIC at once.\n"

      "\n\tcleanup\n"
      "\t\tRemoves all generated files so you can start from scratch.\n"

      "\n\nExample:\n"
      "--------\n"

      "> ./run.py generate_data\n"
      "> ./run.py swarm --input=./local_data/Mosman.csv\n"
      "> ./run.py run --name=Mosman --plot\n"
      "> ./run.py cleanup\n"
      )

  parser = optparse.OptionParser(usage=helpString)

  parser.add_option(
    "--name", dest="name", default=None, type="string",
    help="The name of the gym to work on."
  )

  parser.add_option(
    "--all", dest="all", action="store_true",
    help="If set, will run all gyms. Takes precedence over the "
         "--name attribute."
  )

  parser.add_option(
    "--input", dest="input", default=None, type="string",
    help="Path to data input file or directory."
  )

  parser.add_option(
    "--plot", dest="plot", action="store_true",
    help="If set, will plot results using matplotlib, otherwise writes to "
         "output file."
  )

  (options, positionalArgs) = parser.parse_args(args)

  # There must be a command.
  if len(positionalArgs) is not 1:
    parser.error("Please specify a command.")

  command = positionalArgs[0]

  # Resolve the absolute path to input if there is one.
  inputPath = options.input
  absFilePath = None
  if options.input is not None:
    absFilePath = os.path.expanduser(inputPath)
    absFilePath = os.path.expandvars(absFilePath)
    absFilePath = os.path.abspath(absFilePath)

  # Handle swarm command.
  if command == "swarm":
    if absFilePath is None:
      parser.error("'%s' command requires an --input option." % command)

    swarm_helper.swarm(absFilePath)

  # Handle generate_data command.
  elif command == "generate_data":
    if absFilePath:
      generate_data.run(absFilePath)
    else:
      generate_data.run()

  # Handle run command.
  elif command == "run":
    if options.name is None and options.all is False:
      parser.error("'%s' command requires a --name or --all option." % command)
    if options.all:
      nupic_runner.runAllModels(options.plot)
    else:
      nupic_runner.runModel(options.name, options.plot)

  # Handle the kitchen sink.
  elif command == "kitchen_sink":
    nupic_runner.runItAll(gymName=options.name, plot=options.plot)

  # Handle cleanup command by calling the cleaner.
  elif command == "cleanup":
    cleaner.cleanUp(workingDirs=["swarm"])

  else:
    parser.error("Unrecognized command '%s'." % command)



if __name__ == "__main__":
  runHotGym(sys.argv[1:])
